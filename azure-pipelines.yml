variables:
- group: Pactflow
- group: provider-contract-tests-credentials
- name: buildConfiguration 
  value: 'Release'
- name: NUGET_PACKAGES 
  value: '/home/vsts/work/1/s/OutSystems.Publish.Service/packages/'
- name: AZURE_PAT 
  value: $(System.AccessToken)
- name: AzureServiceConnection  #service connection, not subscription
  value: 'Azure SDLC'  
- name: FEED_URL 
  value: https://pkgs.dev.azure.com/OutSystemsRD/_packaging/ArtifactRepository/nuget/v3/index.json
- name: DockerFilePathVar
  value: $(System.DefaultWorkingDirectory)/OutSystems.Publish.Service/src/OutSystems.Publish.Service
- name: DockerBuildContextVar
  value: $(System.DefaultWorkingDirectory)/OutSystems.Publish.Service
- name: DockerBuildArgumentsVar
  value: --build-arg PAT=$(AZURE_PAT) --build-arg FEED_URL=$(FEED_URL) --build-arg SERVICE_VERSION_ARG=$(ServiceVersion)
- name: Pacticipant
  value: 'publish-service'
- name: ProviderTestsArgumentsVar
  value: '--filter TestCategory=ProviderContractTest -e CT_ENV_NAME=$(CONTRACT_TESTING_ENV_NAME) -e CT_USERNAME=$(CONTRACT_TESTING_USERNAME) -e CT_PASSWORD=$(CONTRACT_TESTING_PASSWORD) -e CT_CLIENT_SECRET=$(CONTRACT_TESTING_CLIENT_SECRET) -e CT_TENANT_ID=$(CONTRACT_TESTING_TENANT_ID) -e CT_ENV_OPENID_URL=$(CONTRACT_TESTING_ENV_OPENID_URL)'  
# containerized test variables
- name: CTDockerFilePathVar
  value: $(System.DefaultWorkingDirectory)/OutSystems.Publish.Service/test/integration_tests/karate
- name: CTDockerBuildContextVar
  value: $(System.DefaultWorkingDirectory)/OutSystems.Publish.Service/test/integration_tests/karate
- name: CTDockerBuildArgumentsVar
  value: --build-arg SERVICE_VERSION_ARG=$(ServiceVersion)
# this name must be service name (from chart.yaml) appended with -ct-job
- name: CTDockerImageNameVar
  value: outsystems-publish-service-ct-job
- name: Logging__LogLevel__Npgsql
  value: Debug

resources:
  repositories:
    - repository: OutSystems.CICDPlatform.PhoenixServicePipelineTemplates
      type: github
      ref: refs/tags/v9
      name: OutSystems/OutSystems.CICDPlatform.PhoenixServicePipelineTemplates
      endpoint: OutSystems-CICD Platform-Phoenix Cloud
    - repository: OutSystems.CICDPlatform.AzureCITemplates
      type: github
      ref: refs/tags/v5
      name: OutSystems/OutSystems.CICDPlatform.AzureCITemplates
      endpoint: OutSystems-CICD Platform-Phoenix Cloud
    - repository: platform_local_k8s_setup
      type: github
      ref: refs/tags/v3
      name: OutSystems/platform-local-k8s-setup
      endpoint: OutSystems-CICD Platform-Phoenix Cloud
    - repository: backstage
      type: github
      ref: refs/tags/v1.1.2
      name: OutSystems/backstage
      endpoint: OutSystems-CICD Platform-Phoenix Cloud
  containers:
    - container: base_image # you cannot use a variable here
      type: ACR  
      azureSubscription: 'Azure SDLC' # service connection, not subscription
      resourceGroup: SdlcPlatformCore
      registry: EdenCore
      repository: dotnet_aspnet
      trigger:
        enabled: true
        tags:
          include:
          - 8.0 # latest #latest

# Trigger only for main
trigger:
  branches:
    include:
    - main

# Do not trigger on PRs
pr: none

stages:    
- template: azure-pipeline.yml@OutSystems.CICDPlatform.PhoenixServicePipelineTemplates
  variables:
    - name: DOTNET_ROLL_FORWARD
      value: LatestMajor
  parameters:
    ProjectName: OutSystems.Publish.Service
    IsGitLFS: true
    BuildUnitTestTimeout: 20
    DotnetTestArgs: --no-build --filter TestCategory=UnitTest
    DockerFilePath: $(DockerFilePathVar)
    DockerBuildContext: $(DockerBuildContextVar)
    DockerBuildArguments: $(DockerBuildArgumentsVar)
    DotNetVersion: '8.x'
    # Sonarcloud Analysis and Coverage:
    SonarCloudExclusionList:  test/**/*, **/Models/**
    SonarCloudCoverageExclusionList: test/**/*, db/**/*, src/OutSystems.Publish.DataAccess/Repository/**, src/OutSystems.Publish.Connectors/NativeAppOrchestrationService/**, src/OutSystems.Publish.DataAccess/Queries/PostgresQueryHelper.cs, **/Models/**, **/Mappers/**, src/OutSystems.Publish.Service/Controllers/**, src/OutSystems.Publish.Service/HealthCheck/**, src/OutSystems.Publish.Application/Services/FireAndForgetService.cs, src/OutSystems.Publish.Application/IpInfoAccessor.cs
    SonarCloudCodeDuplicationToIgnore: test/**/*, **/Models/**, **/Mappers/**
    # Component Tests parameters
    RunComponentTests: true
    ComponentTestsProjectPath: 'test/ComponentTests/OutSystems.Publish.Service.ComponentsTests'
    ComponentTestsProjectFilename: 'OutSystems.Publish.Service.ComponentTests.csproj'
    ComponentTestsTestsBuildConfiguration: 'Release'
    ComponentTestsArguments: '--filter TestCategory=ComponentTests'
    # Integration Tests parameters
    HasPostmanTests: false
    HasContainerizedTests: true
    ContainerizedContinueTaskOnFailedTests: false
    # Publish Provider Bi-directional contract
    GenerateSwagger: true
    PublishProviderBiDirectionalContract: true
    SwaggerPactOutputFolder: $(DockerBuildContext)/dist/
    BiDirectionalProviderPacticipant: "bi-publish-service"
    SwaggerFilePath: "openapi.v1.json" # if you have multiple Swagger files this parameter is redundant
    # PACT Parameters
    PactBrokerToken: $(PactflowToken) 
    PactBrokerBaseUrl: $(PactflowURL)
    PactOutputFolder: '$(System.DefaultWorkingDirectory)/OutSystems.Publish.Service/test/ContractTests/OutSystems.Publish.ContractTests/pacts'
    RunCanIDeploy: false
    Pacticipant: $(Pacticipant)    
    # PACT Consumer Parameters
    RunConsumerContractTests: true
    PACTConsumerProjectFilename: 'test/ContractTests/OutSystems.Publish.ContractTests/OutSystems.Publish.ContractTests.csproj'
    PACTConsumerTestsBuildConfiguration: 'Release'
    PACTConsumerTestsArguments: '--filter TestCategory=ConsumerContractTest'
    # PACT Producer Parameters
    RunProviderContractTests: true
    PACTProviderProjectFilename: 'test/ContractTests/OutSystems.Publish.ProviderContractTests/OutSystems.Publish.ProviderContractTests.csproj'
    PACTProviderTestsArguments: '$(ProviderTestsArgumentsVar)'
    PACTProviderTestsProviderVersion: $(ServiceVersion)
    PACTProviderTestsBuildConfiguration: 'Release'
    # Local Dev Arguments
    RunSimplifiedMainBranch: false

    PreComponentTest:
      - bash:
          echo "##vso[task.setvariable variable=ExtraDeployLocalTestEnvironmentArgs]-c true"
      - task: CmdLine@2
        displayName: Prune docker resources
        inputs:
          script: |
            docker system prune --volumes -a --force
    
    PreIntegrationTest:
      - bash:
          echo "##vso[task.setvariable variable=ExtraDeployLocalTestEnvironmentArgs]-t true"
      - task: CmdLine@2
        displayName: Prune docker resources
        inputs:
          script: |
            docker system prune --volumes -a --force

    #Additional steps to collect logs after integration test
    PostIntegrationTest:
      - task: CmdLine@2
        condition: failed()
        displayName: Fetch logs
        inputs:
          script: |
            PODS4LOGS=(mockserver outsystems nats-pub)
            for i in "${PODS4LOGS[@]}"; do
              for p in $(kubectl get pods | grep ^${i}- | cut -f 1 -d ' '); do
                echo -------PodName----------
                echo $p
                echo -------PodName----------
                kubectl logs $p
              done
            done

- stage: Generate_Files
  variables:
    - template: setup/vars.yml@OutSystems.CICDPlatform.PhoenixServicePipelineTemplates
    - name: GenerateSwagger
      value: true
    - name: GenerateErrorCodes
      value: true
    - name: GenerateAsyncAPI
      value: true
    - name: DOTNET_ROLL_FORWARD
      value: LatestMajor
  jobs:
  - job: Generate_Files
    displayName: 'Generate Specs'
    steps:
      - template: build/ci/dotnet/generate.yml@backstage
        parameters:
          dotNetVersion: '8.x'
          projectPath: 'src/OutSystems.Publish.Service/OutSystems.Publish.Service.csproj'
